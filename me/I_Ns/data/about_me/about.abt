[GENERAL DOCUMENT STATUS IS: UNDER DEVELPMENT]

                                 *YouandIt*
_______________________________________________________________________


This program is the implementation (coding result) of some intentions,
that this document will try to clarify.


[DOCUMENT STATUS IS: FIRST DRAFT]

    When we are referring to intentions, in this particular context, we
are reffering to:

   a. interaction with the computer (it) |INTERFACE| |READLINE| |PAGER|
   b. implementation of the above |INTERFACE IMPLEMENTATION|
   c. process managment under a single process |PROCESS MANAGMENT|

                                 *INTENTIONS*

*CURRENT INTENTIONS*
 
*INTERFACE*   *INTERACTION WITH IT*

Because of the nature of the application, the basic intentions was to be
the foundation to run other applications on it,
the interface should be common for all the running applications.

What it actually means is: (for now)

   a. Window drawing |DRAWING|
   b. Input data |READLINE|
   c. Output navigation |PAGER|, with search capabilities |SEARCH|
 

*DRAWING*

1. Tiled frames.

A window is splitted into frames (by default is one, unless more
defined throw an application).
The root.addwind () provides two variables minframes and maxframes
for that purpose which by default are,
    minframes = 1,
    maxframes = 3

2. Topline

A top line that shows some information about the current application
which by default is:

WIND: [window name], MODE: [mode], PID: [pid] [time]

3. Statusline

A statusline that shows some information about the current frame
to the bottom of each frame, which by default is:

path_basename (filename), [char (current cursor)],
(current line/total lines) current col, current file percent,
frame number

4. Command line

A command line which is reversed to the bottom line minus 1, started
with : as the first char

If the strlen (command line) > COLOUMNS, then it steals/borrows
as many lines is neccecary from the last frame, which they are
restored afterwards

5. Message line

A message line at the last line which is reserved for messages (short
as possible), as there is no way to see it if strlen (msg) > COLUMNS

-----------------------------------------------------------------------
 
        |READLINE|

1. command autocompletion

Triggered with [tab] when cursor is in the first token of command line
It should be specific to application, where every apploication has its
own default commands
By default the application starts a shell, where there are available
the most basic (commands) that are found in every Unix system.

However, shell commands can be accesible in every application (by
default) unless is disabled, by hitting ! as the first char in command
line.

2. arg autocompletion

Triggered with [tab] when cursor is not in first token of command line
and token starts with a -[dash]

Hitting -[tab]
 (autocompletion for arguments) [needs detailed explanation]
      --arg void short message
      --arg= filename short message (filename completion is triggered)
      --arg= pcrepattern short message
      --arg= string short

3. filename completion

Triggered with [tab] when cursor is not in first token of command line
and first char of token is not a -[dash]

4. history completion

Triggered anywhere by hitting CTRL-R or uparrow

5. last component completion

Triggered by Alt-. or CTRL-_ in some terminals like st which
autocompletes the last components from previus commands

6. keep the inserted command

Triggered by Esc_q and holds the inserted so far line, receives input
(new blank line), executes the command and re-enter the holded command

-----------------------------------------------------------------------
[DOCUMENT STATUS IS: DRAFT|PROTO]

*INTERFACE PRINCIPALS*
interaction with it
- its about me
- and i want to say to this computer
- to give me what i want
- with the way i want with
- few surprises (for the best)
  based on vi|less|vim|zsh|screen|tiled window managers

*WRITTING CODE PRINCIPALS*
- one way to do (ala Perl :)) things (trycks however encouraged)

*APPLICATION IMPLEMENTATION PRINCIPALS*
- small memory footprint
- lesser code
- safety
- if bad code, fix it and continue

   *PAGER*
      *SEARCH*

   *IMPLEMENTATION*
      *HIERARRCY*
      *HOW IS WORKING*
 
[DOCUMENT STATUS IS: JUST LOUD THOUGHTS]

implementation details: (maintion the main () functions
                                      exec ()
functions references
struct inheritance
qualifiers usage

only we care about drawing (system should be idled waited by user input)
        (except)
        (for now)
      two (2) processes
a.   drawing server (only)
b. proc server (job managment)
          and
   (BGRUN - userdefined)

   window manipulation
   background managment
      actually the most important feature
      think preprocess data,
            e.g, parsing files to be ready to display them with syntax
            hlighting (this can be done - work is in progress)

*API* this is a long jurney
[to mention]
window name cannot start with a dash

*FEATURE INTENTIONS*

Dynamic output and ftypes
line
 0               78? columns
 1 line         | formated  text  | file
 2 manipulation | based on ftypes | or buffer manipulation
 3 commands     |                 | commands

*S-Lang*
