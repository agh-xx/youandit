[GENERAL DOCUMENT STATUS IS: FIRST DRAFT]

                                 <*YouandIt*>
_______________________________________________________________________

This program is the implementation (coding result) of some intentions.
Declared intentions is believed that is the best way to understand,
speed up and improve the development of a product.

<*INTENTIONS*>

    When we are referring to intentions, in this particular context, we
are reffering to:

   a. interaction with the computer (me and it) (<|INTERFACE|>)
   b. implementation of the above (<|IMPLEMENTATION|>)

The root intention for this application is to provide the ability to run
unlimited applications or functions on it, under a common interface,
which is based on the personality of the human being.

<*INTERFACE*>

   The interface is inspired by maximized mouseless X window managers
such ratpoison and musca, terminal multiplexers like gnu-screen,
zsh shell, vim editor and pagers.
The general idea is to devote the whole screen space to the running
application, and which can be controlled with just the keyboard.

What it actually means is: (for now)
   a. Window drawing (<|DRAWING|>)
   b. Input data (<|READLINE|>)
   c. Output manipulation/navigation (<|PAGER|>) - with search
      capabilities. For now output editing is being done throw
      an external editor, which by default is vim but also jed
      works the same way.
      - at a very recent development, probably editing will be done
        throw the application.

<*DRAWING*>

Drawing is simple (thin lines with no decorations).

A window is splitted into frames (by default is one and maximum are
      three, unless more or less defined throw the application).

Default drawing:

1. Topline
A top line that shows some information about the current application
which for now is:
      WIND: [window name], MODE: [mode], PID: [pid] [time]

2. Statusline
A statusline that shows some information about the current frame
to the bottom of each frame, which by default is:
   path_basename (filename), [char (cursor position)],
   (current line/total lines) current col, current file percent,
   frame number

3. Command line
A command line which is reversed to the bottom line minus 1, started
with : as the prompt char:
If strlen (command line) > COLOUMNS, then it steals/borrows
as many lines is neccecary from the last frame, which they are
restored afterwards

4. Message line
A message line at the last line which is reserved for messages (short
as possible), as there is no way to see it if strlen (msg) > COLUMNS
-----------------------------------------------------------------------
<*READLINE*>

1. command autocompletion

Triggered with [tab] when cursor is on the first token of command line.
It should be specific to window application, where every application
has its own default commands.
By default the application starts a shell, where there are available
the most basic (commands) found in Unix systems.
However, shell commands can be accesible in every application (by
default, unless is disabled), if ! is the first char in command
line.

2. arg autocompletion

Triggered with [tab] when cursor is not on first token of command line
and token starts with a -[dash]

Hitting -[tab]
 (autocompletion for arguments)
  In the case of commands the args declared in info/command/args.txt.
  In the case of functions the args declared in the coresponding Init.sl
  and in the assosiated array named keys.
  In both cases they are following the gnu convention for tho dashes
  and can be declared like:
      --arg  void      short message (no completion)
      --arg= filename  short message (filename completion is triggered)
      --arg= directory short message (directory completion is triggered)
      --arg= pcrepattern short message (a pcre help message is shown in
         the screen, which needs impovement)
      --arg= string short message (no completion but a short message is
         printed in the screen to remind that the option should be a string,
         no error checking for now)
      --arg= int short message (no completion but a short message is
         printed in the screen to remind that the option should be an
         integer, no error checking for now)
 
   in those cases that an option is required after an arg which is
   declared as "--arg=", then (for now) completion process is being
   shown in the top row in the screen, and navigation happens with
   the arrow keys, space and tab key, and is accepted by a carriage
   return (Enter or CTRL-m)

3. filename completion

Triggered with [tab] when cursor is not on first token of command line
and first char of token is not a -[dash]

4. history completion

Triggered anywhere by hitting CTRL-r or uparrow

5. last component completion

Triggered by Alt-. or CTRL-_ in some terminals like st,
which autocompletes the last components from previus commands

6. keep the inserted command

Triggered by Esc_q and holds the inserted so far line, receives input
(new blank line), executes the command and re-enter the holded command

7. window managment commands

Triggered by CTRL-w and `key', where `key' is one of:
   's' or 'v' split window and add another frame
   'c' or 'd' to delete the current frame
   'j' or 'w' or Down_arrow to jump to the next frame
   'k' or Up_Arrow to go to the previous frame
   [0:9] to jump to the nth window


In all cases except (--arg=) command line is accepted by a carriage return.

Escape aborts and clears the line.

Print.
A shell command prints the output in the stdout buffer and always
the verbosity is on (for now)
   Note:
   error messages have their own stderr buf, every window has this
   buffer by default, and unless is defined differently throw command or
   function are printed also and in the stdout buffer.

Functions and only them accept a --pager switch (to jump to the pager),
otherwise output is printed throw a scratch buffer which is cleared after
another command or function and can not be navigated. To be permanent
when in pager 'w' writes the output in the stdout buffer.
   Note:
   Screen can be cleared through the clear function (F1).
   Message buffer can be cleared through the clearmsgs function (F1).

commands/functions accept a --sudo switch, so the command/function can
be executed with sudo rights. sudo asks in every execution the user
password (this cannot be changed and it wouldn't).

commands/functions accept a --fg and --bg switch, so the command/function
can be a foreground or background process. Default is foreground
execution (unless is defined differently through the function).

Completion mode.
Navigation in the completion mode can be done throw arrow keys or
tab and the accepted option is being done throw space. The only
exception (for now) is the last component case where the completion
is being done to the command line and is accepted by a space (it
seems like a freeze but its not (this is rather confusing
abd probably needs to change))

Pressing a char limits the matches and autocompletes completion
components if there are no differences between then, at the point
where matches differs.


Motions.
Motions are quite like emacs mode in common shells like bash/zsh
with exception of CTRL-w which deletes the whole argument and not
a word and they are:

  backspace or CTRL-h deletes the previus char
 
  delete deletes the right to the cursor char

  left arrow/CTRL-b right arrow/CTRL-f keys walk the line left or
    right respectively
 
  home/CTRL-a positions the cursor in the first column

  end/CTRL-e positions the cursor in the last column
 
  CTRL-w deletes the argument

  CTRL-u deletes the line after the cursor to the end of line

When @ is the first char in line, the application is entered in pager
mode. You can escape from the pager by an escape, q or :

when ! is the first char, triggers anytime a shell command and opens
a new frame (unless is disabled throw the application)

when CTRL-w and line is empty is triggered the window mode.

When CTRL-o a windowgoto completion is triggered (unless only one window
exists)

When CTRL-n a window go to the next window function executed (unless
only one window exists)

When CTRL-p a window go to the previus window function executed (unless
only one window exists)


Note:
One space is allowed between tokens and can not be inserted (unless
is defined differently throw functions, like in the cases of --arg=.
-----------------------------------------------------------------------
      <*IMPLEMENTATION*>

The root implementation intention (naturally) is the application to be
responsive and without to result to endless loops or hanging.
That means in case of error, it should throw a detailed message about the
file/function/line that caused the error.
And even, and at the worst case the responsible function or application
can fail to complete, however and for any reason there should never be the
need to kill the root application. (even though this seems an utopic dream,
the exceptions model is a very powerfull mechanism ang is being used
extensible and with good results. However when developing ... happens).

The code is based on arrays.
Structs are being used mainly to create objects.
Lists to pass arguments arround or to store different types
(although mixing types is discouraged with usage of violence).
Associative arrays for mappings or to store named objects or RefType
functions.
There is an extensive usage of qualifiers.
The first choice for any array operation is array_map ().
The first choice for loop operations is _for.
The first choice for concat'ing objects is sprintf ().
The first choice for printing is fprintf ().
Namespaces are being used extensively.
syntax meaning - braces - i dont like to open braces (nothing to do
with braces system)

Initialization.

At the first instance and after some sanity checks, the distribution
is byte compiled and builds the neccecary modules (unless of course
the distribution is already installed).
note: bin and tmp can be mounted in a tmpfs filesystem.
The advantage for mounting bin is that reading bytecompiled files is
faster.
The advantage for mounting tmp is that writting/reading is faster and
nothing persists after a halt/reboot. Keep in mind that when the
application exits, it also deletes the tmp directories.

Hierarchy.

you.sl         name of the root script (symbolic link to dist/you.sl)
               (the user is the godfather of the invoked script)
dist           source code

  you.sl       root script (is the only script that is not bytecompiled)
  i.sl         the main script that is responsible to create and manage
               the application environment

  std          standard directory
    std/commands   shell commands directory
    std/scripts    shell commands
    std/info       (directories which corespond to shell commands)
                   (help files and args)
 
    std/types  standard applications with their own window and settings
    std/types/A_Type   any type has its own directory
    std/types/B_Type   ...

    std/conf  configuration directory
    std/conf/colors  colors configuration
    std/conf/KeysNs  keys configuration (keys namespace)
    std/conf/env     any other variable
 
    std/lib    this directory is the first element on the slang_load_path
               and holds all the required libs for the standard
               commands, functions and applications
 
   std/data   its usage is limited and probably will be in this state if
              it doesn't removed completelly in future
 
   std/scripts its usage is limited and probably will be in this state if
              it doesn't removed completelly in future
 
   std/InputNs libs that are being used for getting input (input namespace)

   std/SockNs  libs that are being used for communication throw sockets
                (sock namespace)

   std/SrvNs   libs that are being used for drawing (srv namespace)

   std/ProcNs  libs that are being used for process managment (proc namespace)

   std/RootNs  libs that are being used for window manipulation (root namespace)

   std/I_Ns    libs that are being used for application managment (i namespace)

  usr
  usr/commands   (copy of std/commands hierarchy)
  usr/types      (copy of std/types hierarchy)
  usr/functions  (common functions that send output to the hosted window)
  usr/lib        (needed libraries, the second element on the slang_load_path)

  local        (this is a copy of the usr hierarchy, not published)

  dev          (a copy of usr hierarchy (used for development, not published)

modules
  modules/std    modules that are being used by the std namespace
  modules/usr    modules that are being used by the usr namespace
  modules/local  modules that are being used by the local namespace

bin            (byte compiled code) (a copy of dist hierarchy)

tmp             temporary dir
  tmp/(user)      user name (strict access)
  tmp/(user)/pid  pid of the instance

data           where the needed data is stored
  data/(user)  user name (personal data) (stirct access)
  data/share   share data (data that can be shared) a symbolic link to
               dist/data/share

Note: There is a couple of questions about data directory.


During initialazion two processes are created:
 
   the first is initializing the slsmg module and is responsible
   for window drawing. Communication happens throw a Unix socket
 
   the second is responsible to create and manage fore|background
   processes. Communication happens throw a Unix socket. It has
   also access to the slsmg process and inherits this ability to
   the created processes.

   (slsmg, fork and socket modules are being used so far)
 
   next care is to initialize a getkey module (SLkp input routines)
   and two public getch|getchar_lang variables which they are references
   to getkey functions

   next care is to create one object (a struct) for window
   manipulation. The object is initialized by creating a new
   copy everytime an application/window is created.
   This gives the ability to applications to have access to common
   functions to all applications, throw F1, a readline own copy,
   where tab is being used for specific to application commands.
   It lives in the "root" namespace and inherits an exec () function.
   The object is a structure with references to functions and
   variables. The called functions are executing by evalfil'ing
   specific bytecompiled files, which they have defined a main ()
   function which is not defined as private.

   That is what the exec () function does.
   Under a try/catch/finally statement:
     - evaluates the bytecompiled file to the "root" namespace
     - gets the main () function reference
     - executes the main function, passing the object (self) and
       any args on the stack
     - redefine the main () to an empty body
 
     It catches a ParseError exception, where:
       it should be print in the screen, information about the
         exception,
       it should write also this message to "msgbuf" (the stderr
       equalivant) field of the "i" object.
       it goes to prompt again to receive input
       (hint) sometimes and if the caller function fails, and while
        waits output to be written in the "fname" field of the
        buf|frame's struct (the stdout equalivant), to shows no input.
       That was in the past the case of a recursive fault
       where the only choise to get out of it, it was to kill the
       application. This now should't be happen. At the worst case
       it will throw you to the "i" window, where there is a available
       the "fixbrokenwindow" command; when is called like
          fixbrokenwindow windname
          it simples change the mtime of the fname and forces the
          draw_frame () function to reread the buffer (usually this fix it).
       What if this happens
       to the "i" window. Who will fix it? Thats why I found that is
       a good idea not to give the availability to run shell commands
       or functions to that window, except those that are to
       adminastrate the distribution and those with care.
 
     It catches a Return exception, where the value is the
     __get_exception_info.object and returns that value.
     the throw'ing statement signature is:
        throw Return, " ", retval;
 
     It catches a Break execption which does nothing, it serves
     to the called main () to return (break the execution) without
     a usefull value.
     the throw'ing statement signature is:
        throw Break;
 
     It catches a GotoPrompt exception which breaks the execution
     and redirects the program to receive input again from the command line
     the throw'ing statement signature is:
       throw GotoPrompt;
 
     finally it catches any other Error, usually runtime errors, which
     the behavior is exactly like the ParseError

    speaking about the exec () and main ()
    Very few standard libs (that are not changing much) are loaded during
    initialization. What it really runs, is always  a main () function
    which get empty after the execution.
    There are objects with a lot of references. Func references are
    great. It permits to temporarly choose the best method, to
    change the function without interfere with the other objects.
    I believe its the best method for abstraction, I think thats how
    they call it. It permits development without thinking too much
    for the compatibility.
    Beacuse of this approach (a function is a file), that permits
    throw bytecompiling the distribution to develop a function or
    a fix for it, without to restart the application.
    Also this a cheap way to profile functions. There is even now the
    ability for this, by starting the application with --debug.
    Profile files are written in TEMPDIR (still code needs to
    be written to initialize the provided information)

 
   So, two such windows (applications/objects) are created by default
   and cannot be deleted.
 
   The first one (named i) is dedicated for distribution managment.
   The second one (named main) application is a shell, where by hitting
   tab there is access to many common Unix commands, which they work in
   most cases like the gnu ones, with some extensions.

   The shell window is always available
   throw CTRL-w-1
   or CTRL-n, CTRL-p (for next|prev window) (if more than one
         window),
   and similar with CTRL-o which triggers (a tab window completion) using a
      (kinda) pop-up (which needs to change)
 
   Those shell commands can be available in any window-application and
   is accessible with ! which then creates a new frame for the shell output
 
  The distribution managment window is available throw F5 or CTRL-w-0
  (and for now) you get out of it with CTRL-[npo]

  (for now) two published applications are available.
   A git application that is a wrapper around git (wish for a git module
   based on libgit2)
   A media application that uses mplayer (old mplayer works perfectly, the
   mplayer2 which is named also mplayer and is found in Debian distributions
   it might froze the application due to a bug (I dont know), the whole
   communication happens with a fifo file (see -slave and -input in
   mplayer command options), so ... (I dont know, I'm using the old good
   mplayer, vlc is somewhat works the same way, but I'm happy with
   mplayer)

   Also there is a special window which is like the quickfix window
   found in vim and is being used by the `search' command to display
   the results. By hitting enter you jump to the specifix line, and
   you have the option to open the file with your editor in that line.
      Hitting 'e' while you are in the pager it gives you the option to
      open the file with the editor.
      Also the `edthisfile' function found in F1, does the same.
      If given without argument, opens the bufname (or stdout), otherwise
      opens the filename which is given as an argument.
      The editor can be changed if you edit the usr/conf/etc/env.sl
      Jed works exactly the same way as vim and this a bright example,
      how different applications which they do the same job, can be coded
      with a way that respect the standards and each other.

   A question about sudo.
   First, all the commands can be invoked with sudo rights, if the
   option --sudo is given.
   But normally sudo close all file descriptors above stderr (2), so
   when a command  is invoked with --sudo, then sudo closes the opened
   socket fds and the application stops working.
   The only way I've found is the option -C in sudo, which forces sudo
   to close fds above the given option, which is plus one than the last
   opened socket fd. However it needs the "closefrom_override" option in
   sudoers.
 
   Functions and commands have the following priority. First the
   interpeter is looking at the personal (local) hierarchy, then at usr
   hierarhy and last at the standard (std) hierarhy.
   Functions are declared as Assoc_Type, so any function that is sourced
   last (which is the local hierarhy) overides  previus declarations.
   It's the Assoc_Type datatype that permits this behavior.
   (High priority intention: The code is trying to initiazize
   (without mercy), all the features of the language, and is always
   trying to find the best method and the cheapest one. To be readable
   is not always a consern)
     For example you see this file, because there is no intro function
     declared/initialized in local/functions/Init.sl. See the prototype
     in usr/functions/Init.sl
     Note: You can add functions during runtime. After you add a key
     in the Associated Array, you bytecompile the distribution (throw
     the "i" window), and when you go back to the previus window, use
     the `rehash' command to create the new hash table (the new function
     will be available for happy use) Isn't that great?
     For now only the Initialization scripts that create structures are
     not "rehashed", as this can be break things, but is not impossible.
     The idea of an eternal development without restarting is
     challenging and attractive.

   The program is assume and expects a UTF-8 locale. End of story. The
   pathetic iso's is thing of the histrory and it should be never been
   invented. It's a historical mistake that caused slow down, headaches,
   bad, ugly code that even today is included in programs for
   compatibility. This program has included code to write in english and
   greek (this can be toogled with f10). To create a map is redicously
   trivial and is indepentently if you are in X enviroment or behind
   a limux terminal. I'm telling this because for years that was the
   case of anger of international users. Why the things could't be more
   simpler? Anyway the code lives in std/InputNs/input.sl.
   That's the reason of the existance of the getchar_lang variable.
 
   <*IMPLEMENTATION DETAILS*>
   Command arg declarations, adopts fully the Gnu conventions for two dashes
   "--", the one dash is avoided. note: however and because there is always
   a respective help line, some long common options can be shorter, like say
   "recursive" can become "rec".

   <*FUTURE INTENTIONS*>
 
   A self contained application; that means statically builted liblang
   and interpreter.

   Specific builted interpreters for specialized jobs.

   Reduce code from root process.
-----------------------------------------------------------------------
<*PAGER*>

Motions are quite like less pager and vim editor and they are:

g/HOME to go to the first line of buffer
G/END  to go to the last  line of buffer
h/left arrow to go the previus char from cursor position
l/right arrow to go the next char from cursor position
k/up arrow to go to the previus line
j/down arrow to go to the next line
PageDown/CTRL-f to scroll one page down
PageUp/CTRL-b to scroll one page up
0 to go the first column of line
^ to go the first no blank char of line
- to go to the last char of line (even if strlen (line) > COLUMNS)
$ to go to the last char of screen line
%nr up to 100, to go to the percentage of buffer

Motions accept a count prefix.

Also:

w writes (if the viewed buffer is a scratch buffer to the stdout buffer)
e opens the filename associated with the currently viewed buffer
  with the EDITOR (default vim) in the current line
* jumps to the next WORD and no word in vim interpetation
# jumps to the previus WORD
/ search forward for the given pattern (it doesn't jumps to the match)
  How it works (for now). The pattern completion happens in the
  last line in the screen minus one. It prints some information
  about the current match - line and column - and only jumps
  with a carriage return. Aborts with an escape. CTRL-n continues
  searching. The idea is good the implementation is horrible.
? search backward
CTRL-w jumps to the previus frame (if more than one)


DEVELOPMENT NOTE. Pager is going to be running in another process (under
development). This same file should be displayed in that process and
search and other facilities doesn't work like in the default pager do.
-----------------------------------------------------------------------
<*S-Lang*>

The language of choice is S-Lang.
   http://www.jedsoft.org/

    S-Lang has a C-like syntax, is extremely fast (compared with other
interpreted languages) and with a very small memory footprint.

It has all the expected common DataTypes, is UTF-8 compatible, has
low level screen mangment routines, comes with the most common low
level C/POSIX functions and bindings to two regexp machines
(PCRE and ONIGURAMA), curl and other specific usage modules.

But!!! the real power of the language is the array manipulation, which
exceeds any other known Programming Language.

This project (good, bad or ugly) is dedicated to everybody contributed to
S-Lang Programming Language and primarly to its author (John E. Davis),
but also to everybody else who offered in the Open Source Programming
Universe.

...
