This application is like an operating system, which lives in an operating system.
The only dependencies is S-Lang [http://jedsoft.org/slang] and very few standard
command line utilities.

It offers:
  process managment (foreground and background)
  a common interface for applications
  a readline interface (with command|filename|arg|history completion ala zsh)
  a pager (ala less)
  a basic editor (ala vim) (under development but partly functional)
  standard utilities (which mimic the gnu-coreutils with extensions)
  a debug console and functions to manage the distribution

Its interface is almost like vim's editor.

It was written in S-Lang mainly because the language is simple (it uses a C-like
syntax) with a small memory footprint, great array manipulation and because
probably is one of the fasted interpreted languages.

This is a work in progress and it should be regarded like this in eternity, as one
of the basic reasons which this project was started, is to be used to teach basic
programming concepts to the author first and to other people around this guy.

INSTALLATION

# Required dependencies (almost all of them are installed by default to
# any Linux distribution):
#
# ps from procps-ng
# stty from coreutils
# sudo
# diff
# patch
# git
# libpcre (libs and headers)
# libcurl (lib and header)

# optionally
# to display man pages
# col from util_linux
# groff
# gzip

# open a shell and enter the following commands

# optionally:
# mkdir gitrepos
# cd gitrepos

# This application always follows S-Lang development, so it won't work
# with a standard release, so
# clone S-Lang repository

git clone git://git.jedsoft.org/git/slang.git &&

# build distribution
cd slang
# by default prefix is /usr/local, so leave it there as it doesn't contadicts
# with another libslang installed by a package manager

./configure &&
# check if has picked up pcre, otherwise install pcre headers and libs and rerun
# configure
make &&
sudo make install &&
# run ldconfig
sudo ldconfig -v
cd ../

# install curl module
git clone git://git.jedsoft.org/git/slcurl.git
cd slcurl
./configure &&
# check for any errors, namely a missing curl header
make &&
sudo make install

# Now make a dir to store the sources for this application
mkdir somedir
cd somedir

# IMPORTANT NOTE: it should be dist for the name of the repo,
# otherwise nothing will work
git clone https://github.com/agh-xx/youandit.git dist
ln -sv dist/you.sl

# create the personal/development hierarchy
mkdir -p dist/local/functions/scripts
mkdir dist/local/functions/info
mkdir dist/local/types
mkdir dist/local/lib
mkdir -p dist/local/commands/scripts
mkdir dist/local/commands/info
mkdir -p dist/dev/functions/scripts
mkdir dist/dev/functions/info
mkdir dist/dev/types
mkdir dist/dev/lib
mkdir -p dist/dev/commands/scripts

# End of installation commands

# PREREQUISITY to make sudo work properly and it wont break the application
# sudo it closes all file integer descriptors above stderr file descriptor (2)

# so add the following three lines to your sudoers
# replace USER with your username

Defaults:USER closefrom_override
Defaults:USER !tty_tickets
Defaults:USER timestamp_timeout=1

#optionally add to /etc/fstab a tmpfs to tmp and bin, like,
# none      somedir/tmp  tmpfs   size=200M,user  0      0
# none      somedir/bin  tmpfs   size=15M,user,noatime,exec 0 0
# in the last occation then the installation process will be executed
# at the first invocation
# note: bin and tmp should exist if mounted like this

# Now run
/usr/bin/local/slsh ./you.sl

%%%
Development continues to "ayios" project, which that name it can also means
the son of this project.

The purpose of the project was more like a waterfall process, where the
idea first was to understand and implement a design, and then write some
code for initial develpment and to test the system.
That means in terms of versioning 0.5.

The purpose of the new project is to design and stabizize the api.

It should do it by reusing much of the present code, as this code reused
code which was written initial in spring of 2010 while learning S-Lang.

I'm quite happy with the project for some of the following reasons:

- it came in a very difficult period for me and my family and coding was a
a way to keep me consentrate

- the working flaw is in some ways exciting and I should say quite fast.
The interface is common for all functions/commands/applications, where even
for the kids (even for my older daughter which is now 10) it was easy to
understand and use it (tab makes wonders)
(It's really practical to write code in the language you know, that does
everything you want, with a personalized, common and _predictable_ way.)

- the quality of the code is quite good in many cases. The missing Internet
connection for years, helped me to solve the problems i was facing by myself,
and the solutions strangely in many cases it was more in the same direction
other people followed to solve the same problems (after later check other people's
work, even the name of the functions was sometimes the same). For an undecuated
farmer and shepherd that started coding in old aga, made me feel a little
proud. There are some functionalities that dont exist in high profiled
programs, written by engineers that work in Google or Samusng :)

- the program does what it does by using very few system resources and does
it fast. Faults are not end up in unresponsive state, error handling is good
and the messages helps you understand at once where is the line code that
gave the error (this is a high priority); this is not still the case for
ayios (suppossedly a better designed code (at the time of writting this,
at 20 of August) - but it will be (if there is a future)), so ...... --->

https://github.com/ayios


